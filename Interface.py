import streamlit as st
import google.generativeai as genai

# Set your Gemini API key here
genai.configure(api_key="your api key")

# Load the Gemini model
model = genai.GenerativeModel("gemini-1.5-flash")

# Recipe list (you can add more recipes here)
recipe_names = sorted([
    "Apple Pie", "Banana Bread", "Butter Chicken", "Chicken Biryani", "Chocolate Cake",
    "Dosa", "Egg Curry", "Fish Tikka", "Garlic Bread", "Hummus", "Ice Cream",
    "Jambalaya", "Kofta", "Lasagna", "Mango Smoothie", "Noodles", "Omelette",
    "Pasta Alfredo", "Quiche", "Ramen", "Samosa", "Tacos", "Udon", "Vegetable Curry",
    "Waffles", "Xacuti", "Yogurt Parfait", "Zucchini Fritters"
])

# Streamlit page settings
st.set_page_config(page_title="AI Food Recipe Generator", layout="centered")

# Language selector
language = st.selectbox("ЁЯМР Select Language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:", ["English", "рд╣рд┐рдВрджреА"])

# Define text labels based on selected language
if language == "English":
    title = "ЁЯН╜я╕П AI Food Recipe Generator"
    search_label = "Search or select a recipe:"
    button_label = "Get Recipe"
    loading_text = "Generating recipe using Gemini..."
    error_text = "Failed to generate recipe"
    recipe_heading = "ЁЯУЛ Recipe for"
    prompt_template = "Give me a detailed recipe for {} including ingredients and preparation steps. Write in English."
else:
    title = "ЁЯН╜я╕П рдПрдЖрдИ рдлреВрдб рд░реЗрд╕рд┐рдкреА рдЬреЗрдирд░реЗрдЯрд░"
    search_label = "рдХреЛрдИ рд░реЗрд╕рд┐рдкреА рдЦреЛрдЬреЗрдВ рдпрд╛ рдЪреБрдиреЗрдВ:"
    button_label = "рд░реЗрд╕рд┐рдкреА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ"
    loading_text = "Gemini рд╕реЗ рд░реЗрд╕рд┐рдкреА рдкреНрд░рд╛рдкреНрдд рдХреА рдЬрд╛ рд░рд╣реА рд╣реИ..."
    error_text = "рд░реЗрд╕рд┐рдкреА рдЬрдирд░реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓"
    recipe_heading = "ЁЯУЛ рд░реЗрд╕рд┐рдкреА:"
    prompt_template = "{} рдХреА рд╡рд┐рд╕реНрддреГрдд рд░реЗрд╕рд┐рдкреА рдмрддрд╛рдПрдВ рдЬрд┐рд╕рдореЗрдВ рд╕рд╛рдордЧреНрд░реА рдФрд░ рдмрдирд╛рдиреЗ рдХреА рд╡рд┐рдзрд┐ рд╢рд╛рдорд┐рд▓ рд╣реЛред рдХреГрдкрдпрд╛ рд╣рд┐рдВрджреА рдореЗрдВ рд▓рд┐рдЦреЗрдВред"

# Show title
st.title(title)

# Recipe selection dropdown
selected_recipe = st.selectbox(search_label, options=recipe_names)

# Generate Recipe Button
if st.button(button_label):
    with st.spinner(loading_text):
        prompt = prompt_template.format(selected_recipe)
        try:
            response = model.generate_content(prompt)
            st.subheader(f"{recipe_heading} {selected_recipe}")
            st.markdown(response.text)
        except Exception as e:
            st.error(f"{error_text}: {e}")
